html
--
<section>
  <h2>ðŸ“± Timeline of Mobile Development</h2>
  <div class="v-timeline">
    <div class="v-event">
      <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5c/IBM_logo.svg/120px-IBM_logo.svg.png" alt="IBM" />
      <div>
        <h4>1994 â€“ IBM Simon</h4>
        <p>First smartphone with built-in apps</p>
      </div>
    </div>

    <div class="v-event">
      <img src="https://upload.wikimedia.org/wikipedia/commons/0/02/NTT_Docomo_logo.svg" alt="NTT DoCoMo" />
      <div>
        <h4>2001 â€“ NTT DoCoMo</h4>
        <p>First downloadable mobile content</p>
      </div>
    </div>

    <div class="v-event">
      <img src="https://upload.wikimedia.org/wikipedia/commons/f/fa/Apple_logo_black.svg" alt="Apple" />
      <div>
        <h4>2007 â€“ iPhone</h4>
        <p>Touch UI, no App Store at launch</p>
      </div>
    </div>

    <div class="v-event">
      <img src="https://upload.wikimedia.org/wikipedia/commons/d/d0/App_Store_%28iOS%29.svg" alt="App Store" />
      <div>
        <h4>2008 â€“ App Store & Android Market</h4>
        <p>Apps become mainstream</p>
      </div>
    </div>

    <div class="v-event">
      <img src="https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg" alt="React Native" />
      <div>
        <h4>2015 â€“ React Native</h4>
        <p>JS-powered native apps from Meta</p>
      </div>
    </div>

    <div class="v-event">
      <img src="https://upload.wikimedia.org/wikipedia/commons/1/17/Google-flutter-logo.png" alt="Flutter" />
      <div>
        <h4>2017 â€“ Flutter</h4>
        <p>Dart UI toolkit with hot reload</p>
      </div>
    </div>

    <div class="v-event">
      <img src="https://upload.wikimedia.org/wikipedia/commons/e/ee/.NET_Core_Logo.svg" alt=".NET MAUI" />
      <div>
        <h4>2021 â€“ .NET MAUI</h4>
        <p>Unified C# platform from Microsoft</p>
      </div>
    </div>

    <div class="v-event">
      <img src="https://upload.wikimedia.org/wikipedia/commons/7/74/Kotlin_Icon.png" alt="Jetpack Compose" />
      <div>
        <h4>2023+ â€“ Compose Multiplatform</h4>
        <p>Kotlin UI across Android, desktop, and more</p>
      </div>
    </div>
  </div>
</section>


--

css
--
/* Timeline.css */
.v-timeline {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  padding-top: 1rem;
  max-width: 500px;
  margin: 0 auto;
}

.v-event {
  display: flex;
  align-items: center;
  gap: 1rem;
  border-left: 3px solid #ccc;
  padding-left: 1rem;
  position: relative;
}

.v-event::before {
  content: '';
  width: 12px;
  height: 12px;
  background-color: #555;
  border-radius: 50%;
  position: absolute;
  left: -7px;
  top: 0.75rem;
}

.v-event img {
  width: 40px;
  height: 40px;
  object-fit: contain;
}

.v-event h4 {
  margin: 0;
  font-size: 1rem;
}

.v-event p {
  margin: 0;
  font-size: 0.85rem;
  color: #666;
}


--

<section>
  <h2>Native vs Hybrid vs Crossâ€‘Platform</h2>
  <div style="display:flex;gap:2rem;justify-content:center;align-items:flex-start;font-size:0.9em;">

    <div style="flex:1;">
      <h3>Native</h3>
      <ul>
        <li>Separate codebases</li>
        <li>Best performance</li>
        <li>Languages: Java/Kotlin, Swift/Objâ€‘C</li>
      </ul>
    </div>

    <div style="flex:1;">
      <h3>Hybrid</h3>
      <ul>
        <li>WebView with HTML/JS/CSS</li>
        <li>Fast to build, web skills reuse</li>
        <li>Examples: Cordova, Ionic</li>
      </ul>
    </div>

    <div style="flex:1;">
      <h3>Crossâ€‘Platform</h3>
      <ul>
        <li>Shared code + nearâ€‘native UI</li>
        <li>Reduced duplication</li>
        <li>Examples: React Native, Flutter, MAUI, Compose</li>
      </ul>
    </div>

  </div>
</section>

--

<section>
  <h2>How Development Evolved</h2>
  <svg width="100%" height="220">
    <!-- Native -->
    <rect x="30" y="40" width="160" height="80" fill="#4CAF50" rx="8"></rect>
    <text x="110" y="85" fill="white" text-anchor="middle" font-size="16">Native</text>

    <!-- Arrow -->
    <line x1="190" y1="80" x2="250" y2="80" stroke="black" stroke-width="2" marker-end="url(#arrow)" />

    <!-- Hybrid -->
    <rect x="250" y="40" width="160" height="80" fill="#FFC107" rx="8"></rect>
    <text x="330" y="85" fill="black" text-anchor="middle" font-size="16">Hybrid</text>

    <!-- Arrow -->
    <line x1="410" y1="80" x2="470" y2="80" stroke="black" stroke-width="2" marker-end="url(#arrow)" />

    <!-- Cross Platform -->
    <rect x="470" y="40" width="200" height="80" fill="#2196F3" rx="8"></rect>
    <text x="570" y="85" fill="white" text-anchor="middle" font-size="16">Cross-Platform</text>

    <defs>
      <marker id="arrow" markerWidth="10" markerHeight="10" refX="6" refY="3" orient="auto" markerUnits="strokeWidth">
        <path d="M0,0 L0,6 L9,3 z" fill="#000"/>
      </marker>
    </defs>
  </svg>

  <p style="font-size:0.9em;margin-top:1rem;">
    From writing two separate native apps â†’ Hybrid WebView apps â†’ Modern cross-platform frameworks
  </p>
</section>

--
Hybrid Apps Today â€“ Are They Still Popular?
Hybrid (WebView) approach is much less popular today than it was in 2010â€“2015.

Current status:
Cordova and PhoneGap:

PhoneGap was discontinued in 2020 (Adobe officially ended support).

Cordova is still around but rarely chosen for new apps.

Ionic:

A modern successor to Cordova for hybrid apps. It still uses WebView but has improved tooling and a component library.

Capacitor:

A newer runtime by the Ionic team (modern replacement for Cordova).

Why hybrid is less common:
Performance and UX expectations are much higher now.

Cross-platform (Flutter, React Native) delivers native performance with shared code, so they became the preferred choice.

Hybrid is mostly used today for:

Enterprise apps that need to quickly wrap existing web apps

Simple apps with a heavy web content focus

Summary:
Hybrid = niche today.

Cross-platform has become the default for teams who want shared code without losing native feel.