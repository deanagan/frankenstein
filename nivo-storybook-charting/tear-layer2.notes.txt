import React, { useState } from 'react';
import { ResponsiveLine } from '@nivo/line';

// Sample data
const data = [
  {
    id: 'line1',
    color: 'hsl(200, 70%, 50%)',
    data: [
      { x: '2021-01-01', y: 100 },
      { x: '2021-02-01', y: 200 },
      { x: '2021-03-01', y: 300 },
      { x: '2021-04-01', y: 250 },
      { x: '2021-05-01', y: 450 },
    ]
  },
];

const LineChartWithCustomTooltip = () => {
  const [tooltipData, setTooltipData] = useState(null);

  // Custom tooltip content
  const CustomTooltip = ({ point }) => {
    return (
      <div style={{ backgroundColor: 'rgba(0, 0, 0, 0.7)', color: 'white', padding: '5px', borderRadius: '4px' }}>
        <strong>{point.serieId}</strong><br />
        <strong>{point.data.xFormatted}</strong>: {point.data.yFormatted}
      </div>
    );
  };

  return (
    <div style={{ height: 400 }}>
      <ResponsiveLine
        data={data}
        margin={{ top: 50, right: 110, bottom: 50, left: 60 }}
        xScale={{ type: 'point' }}
        yScale={{ type: 'linear', min: 'auto', max: 'auto', stacked: false }}
        curve="monotoneX"
        enablePoints={true}
        pointSize={10}
        pointColor={{ from: 'color', modifiers: [['darker', 0.5]] }}
        pointBorderWidth={2}
        pointBorderColor={{ from: 'serieColor' }}
        useMesh={true}  // Use mesh for tracking interactions
        tooltip={(point) => <CustomTooltip point={point} />} // Custom tooltip
        onMouseEnter={(point, event) => {
          setTooltipData(point); // Set tooltip data when hovering over a point
        }}
        onMouseLeave={() => {
          setTooltipData(null); // Hide tooltip when mouse leaves
        }}
        axisBottom={{
          legend: 'Date',
          legendPosition: 'middle',
          legendOffset: 40
        }}
        axisLeft={{
          legend: 'Value',
          legendPosition: 'middle',
          legendOffset: -40
        }}
      />
      {/* Render custom tooltip manually at the mouse position */}
      {tooltipData && (
        <div
          style={{
            position: 'absolute',
            left: `${tooltipData.event.clientX + 10}px`,
            top: `${tooltipData.event.clientY + 10}px`,
            pointerEvents: 'none',
          }}
        >
          <CustomTooltip point={tooltipData} />
        </div>
      )}
    </div>
  );
};

export default LineChartWithCustomTooltip;